/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
window.l2js && function(l2js) {
l2js.compiler.Lparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_entries":4,"EOF":5,"stmts":6,"stmt":7,";":8,"var":9,"=":10,"e":11,"symbol":12,"text":13,"LSCRIPT":14,"id":15,"{":16,"}":17,"LSYSTEM":18,"(":19,"axiom":20,")":21,"USING":22,",":23,"number":24,"ALPHABET":25,"symbols":26,"INCLUDED":27,"TEXT":28,"ancestor":29,"RULE_OP":30,"successors":31,"H_RULE_OP":32,"main_call":33,"sublsystem":34,"call":35,"DERIVE":36,"SUBLSYSTEM":37,"CALL":38,"MAIN":39,"string":40,"iterations":41,"params":42,"successor":43,"|":44,":":45,"module":46,"arguments":47,"param":48,"ID":49,"VAR":50,"+":51,"term":52,"-":53,"*":54,"factor":55,"/":56,"FUNC":57,"E":58,"PI":59,"NUMBER":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",10:"=",14:"LSCRIPT",16:"{",17:"}",18:"LSYSTEM",19:"(",21:")",22:"USING",23:",",25:"ALPHABET",27:"INCLUDED",28:"TEXT",30:"RULE_OP",32:"H_RULE_OP",36:"DERIVE",37:"SUBLSYSTEM",38:"CALL",39:"MAIN",44:"|",45:":",49:"ID",50:"VAR",51:"+",53:"-",54:"*",56:"/",57:"FUNC",58:"E",59:"PI",60:"NUMBER"},
productions_: [0,[3,2],[4,1],[6,3],[6,1],[6,0],[7,3],[7,3],[7,1],[7,5],[7,10],[7,12],[7,5],[7,5],[7,3],[7,3],[7,1],[7,1],[7,1],[7,2],[34,5],[34,7],[34,6],[34,4],[35,5],[35,7],[35,6],[35,4],[33,2],[20,1],[41,1],[29,4],[29,1],[31,3],[31,1],[43,3],[43,1],[40,2],[40,1],[46,4],[46,1],[46,1],[46,1],[47,3],[47,2],[47,1],[47,0],[42,3],[42,2],[42,1],[42,0],[48,1],[26,3],[26,1],[26,0],[12,1],[9,1],[15,1],[11,3],[11,3],[11,1],[52,3],[52,3],[52,1],[55,4],[55,1],[55,1],[55,1],[55,1],[55,3],[13,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
        	// TODO: add restrictions only to valid statements
            /*var i;
			for(i = 0; i < $stmts.length; i++) {
				var errMsg,stmt = $stmts[i];
				if( stmt instanceof yy.ASTRule) {
					errMsg = 'Main program should not contain rule declaration.';
				} else if(stmt instanceof yy.ASTCall && !stmt.isMain) {
					errMsg = 'In global scope use only main call.';
				} 
				
				if(typeof errMsg !== 'undefined') {
					throw new yy.ParseError('Parse error on ' + this._$.first_line + ':' + this._$.last_column + '. ' + errMsg );
				}
			}*/
			
        	var block = new yy.ASTBlock(); 
        	block.isRoot = true;
        	block.entries = $$[$0-1]; 
        	return block; 
        
break;
case 2:this.$ = $$[$0];
break;
case 3:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 4:this.$ = [$$[$0]];
break;
case 5:this.$ = [];
break;
case 6:this.$ = $$[$0-2]; this.$.e = $$[$0];
break;
case 7:this.$ = $$[$0-2];this.$.e = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:
			// TODO: add restrictions only to valid statements
			var block = new yy.ASTBlock();
			block.entries = $$[$0-1];
			
			this.$ = new yy.ASTLScript($$[$0-3], block); 
		
break;
case 10:
			var block = new yy.ASTBlock(); 
			block.entries = $$[$0-1];
			this.$ = new yy.ASTLSystem($$[$0-8], $$[$0-3], $$[$0-6], undefined , block);
		
break;
case 11:
			if($$[$0-6] % 1 !== 0) {
				var errMsg = "Number of iterations should be integer.";
				throw new yy.ParseError('Parse error on ' + this._$.first_line + ':' + this._$.last_column + '. ' + errMsg );
			}
			var block = new yy.ASTBlock(); 
			block.entries = $$[$0-1];
			this.$ = new yy.ASTLSystem($$[$0-10], $$[$0-3], $$[$0-8], $$[$0-6], block);
		
break;
case 12:
			$$[$0-3].type='alphabet';
			this.$ = new yy.ASTAlphabet($$[$0-3], $$[$0-1]);
		
break;
case 13:this.$ = new yy.ASTIncluded($$[$0-3], $$[$0-1]);
break;
case 14:this.$ = new yy.ASTRule($$[$0-2], $$[$0]);
break;
case 15:this.$ = new yy.ASTRule($$[$0-2], $$[$0], 'h');
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = new yy.ASTDerive($$[$0]);
break;
case 20:$$[$0-3].type="lsystem"; this.$ = new yy.ASTSubLSystem($$[$0-3], $$[$0-1]);
break;
case 21:
			$$[$0-5].type="lsystem"; this.$ = new yy.ASTSubLSystem($$[$0-5], $$[$0-3], $$[$0-1]);
		
break;
case 22:
		
			$$[$0-4].type="lsystem"; this.$ = new yy.ASTSubLSystem($$[$0-4], undefined, $$[$0-1]);
		
break;
case 23:$$[$0-2].type="lsystem"; this.$ = new yy.ASTSubLSystem($$[$0-2]);
break;
case 24:$$[$0-3].type="lsystem"; this.$ = new yy.ASTCall($$[$0-3], $$[$0-1]);
break;
case 25:
			$$[$0-5].type="lsystem"; this.$ = new yy.ASTCall($$[$0-5], $$[$0-3], $$[$0-1]);
		
break;
case 26:
			$$[$0-4].type="lsystem"; this.$ = new yy.ASTCall($$[$0-4], undefined, $$[$0-1]);
		
break;
case 27:$$[$0-2].type="lsystem"; this.$ = new yy.ASTCall($$[$0-2]);
break;
case 28:this.$ = $$[$0]; this.$.isMain = true;
break;
case 29:this.$ = $$[$0]
break;
case 30:
			if($$[$0] % 1 !== 0) {
				var errMsg = "Number of iterations should be integer.";
				throw new yy.ParseError('Parse error on ' + this._$.first_line + ':' + this._$.last_column + '. ' + errMsg );
			}
			this.$ = $$[$0];
		
break;
case 31:this.$ = new yy.ASTAncestor($$[$0-3], $$[$0-1]);
break;
case 32:this.$ = new yy.ASTAncestor($$[$0]);
break;
case 33:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 34:this.$ = [$$[$0]];
break;
case 35:this.$ = new yy.ASTSuccessor($$[$0-2], $$[$0]);
break;
case 36:this.$ = new yy.ASTSuccessor($$[$0]);
break;
case 37:this.$ = $$[$0]; this.$.unshift($$[$0-1]);
break;
case 38:this.$ = [$$[$0]];
break;
case 39:$$[$0-3].type="symbol"; this.$ = new yy.ASTModule($$[$0-3], $$[$0-1]);
break;
case 40:$$[$0].type="symbol"; this.$ =  new yy.ASTModule($$[$0]);
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 44:this.$ = $$[$0]; this.$.unshift(undefined);
break;
case 45:this.$ = [$$[$0]];
break;
case 46:this.$ = [];
break;
case 47:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 48:this.$ = $$[$0]; this.$.unshift(undefined);
break;
case 49:this.$ = [$$[$0]];
break;
case 50:this.$ = [];
break;
case 51: this.$ = new yy.ASTId($$[$0], 'param');
break;
case 52:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 53:this.$ = [$$[$0]];
break;
case 54:this.$ = [];
break;
case 55: this.$ = $$[$0]; this.$.type='symbol';
break;
case 56: this.$ = new yy.ASTId($$[$0], 'var'); 
break;
case 57: this.$ = new yy.ASTId($$[$0]); 
break;
case 58:this.$ = new yy.ASTOperation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 59:this.$ = new yy.ASTOperation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 60:this.$ = $$[$0];
break;
case 61:this.$ = new yy.ASTOperation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:this.$ = new yy.ASTOperation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 63:this.$ = $$[$0];
break;
case 64:this.$ = new yy.ASTFunc($$[$0-3], $$[$0-1]);
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = Math.E;
break;
case 67:this.$ = Math.PI;
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = new yy.ASTBrackets($$[$0-1]);
break;
case 70:this.$ = String(yytext);
break;
case 71:this.$ =  Number(yytext);
break;
}
},
table: [{3:1,4:2,5:[2,5],6:3,7:4,9:5,11:7,12:6,14:[1,8],15:18,18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{1:[3]},{5:[1,31]},{5:[2,2]},{5:[2,4],8:[1,32],17:[2,4]},{5:[2,68],8:[2,68],10:[1,33],17:[2,68],51:[2,68],53:[2,68],54:[2,68],56:[2,68]},{10:[1,34],19:[1,35],30:[2,32],32:[2,32]},{5:[2,8],8:[2,8],17:[2,8],51:[1,36],53:[1,37]},{15:38,49:[1,23]},{15:39,49:[1,23]},{15:40,49:[1,23]},{28:[1,41]},{30:[1,42],32:[1,43]},{5:[2,16],8:[2,16],17:[2,16]},{5:[2,17],8:[2,17],17:[2,17]},{5:[2,18],8:[2,18],17:[2,18]},{15:44,49:[1,23]},{5:[2,56],8:[2,56],10:[2,56],17:[2,56],21:[2,56],23:[2,56],51:[2,56],53:[2,56],54:[2,56],56:[2,56]},{10:[2,55],17:[2,55],19:[2,55],23:[2,55],30:[2,55],32:[2,55]},{5:[2,60],8:[2,60],17:[2,60],21:[2,60],23:[2,60],51:[2,60],53:[2,60],54:[1,45],56:[1,46]},{35:47,38:[1,22]},{15:48,49:[1,23]},{15:49,49:[1,23]},{5:[2,57],8:[2,57],10:[2,57],16:[2,57],17:[2,57],19:[2,57],21:[2,57],23:[2,57],30:[2,57],32:[2,57],37:[2,57],38:[2,57],44:[2,57],45:[2,57],49:[2,57]},{5:[2,63],8:[2,63],17:[2,63],21:[2,63],23:[2,63],51:[2,63],53:[2,63],54:[2,63],56:[2,63]},{19:[1,50]},{5:[2,65],8:[2,65],17:[2,65],21:[2,65],23:[2,65],51:[2,65],53:[2,65],54:[2,65],56:[2,65]},{5:[2,66],8:[2,66],17:[2,66],21:[2,66],23:[2,66],51:[2,66],53:[2,66],54:[2,66],56:[2,66]},{5:[2,67],8:[2,67],17:[2,67],21:[2,67],23:[2,67],51:[2,67],53:[2,67],54:[2,67],56:[2,67]},{9:52,11:51,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,71],8:[2,71],17:[2,71],21:[2,71],23:[2,71],44:[2,71],51:[2,71],53:[2,71],54:[2,71],56:[2,71]},{1:[2,1]},{5:[2,5],6:53,7:4,9:5,11:7,12:6,14:[1,8],15:18,17:[2,5],18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{9:52,11:54,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{13:55,28:[1,56]},{21:[2,50],23:[1,59],42:57,48:58,49:[1,60]},{9:52,19:[1,29],24:26,50:[1,17],52:61,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{9:52,19:[1,29],24:26,50:[1,17],52:62,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{16:[1,63]},{19:[1,64]},{16:[1,65]},{16:[1,66]},{15:71,31:67,34:73,35:72,37:[1,21],38:[1,22],40:69,43:68,46:70,49:[1,23]},{15:71,31:74,34:73,35:72,37:[1,21],38:[1,22],40:69,43:68,46:70,49:[1,23]},{5:[2,19],8:[2,19],17:[2,19]},{9:52,19:[1,29],24:26,50:[1,17],55:75,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{9:52,19:[1,29],24:26,50:[1,17],55:76,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,28],8:[2,28],17:[2,28]},{19:[1,77]},{19:[1,78]},{9:52,11:80,19:[1,29],21:[2,46],23:[1,81],24:26,47:79,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{21:[1,82],51:[1,36],53:[1,37]},{5:[2,68],8:[2,68],17:[2,68],21:[2,68],23:[2,68],51:[2,68],53:[2,68],54:[2,68],56:[2,68]},{5:[2,3],17:[2,3]},{5:[2,6],8:[2,6],17:[2,6],51:[1,36],53:[1,37]},{5:[2,7],8:[2,7],17:[2,7]},{5:[2,70],8:[2,70],17:[2,70]},{21:[1,83]},{21:[2,49],23:[1,84]},{21:[2,50],23:[1,59],42:85,48:58,49:[1,60]},{21:[2,51],23:[2,51]},{5:[2,58],8:[2,58],17:[2,58],21:[2,58],23:[2,58],51:[2,58],53:[2,58],54:[1,45],56:[1,46]},{5:[2,59],8:[2,59],17:[2,59],21:[2,59],23:[2,59],51:[2,59],53:[2,59],54:[1,45],56:[1,46]},{6:86,7:4,9:5,11:7,12:6,14:[1,8],15:18,17:[2,5],18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{15:71,20:87,34:73,35:72,37:[1,21],38:[1,22],40:88,46:70,49:[1,23]},{12:90,15:18,17:[2,54],26:89,49:[1,23]},{6:91,7:4,9:5,11:7,12:6,14:[1,8],15:18,17:[2,5],18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,14],8:[2,14],17:[2,14]},{5:[2,34],8:[2,34],17:[2,34],44:[1,92]},{5:[2,36],8:[2,36],17:[2,36],44:[2,36],45:[1,93]},{5:[2,38],8:[2,38],15:71,17:[2,38],21:[2,38],23:[2,38],34:73,35:72,37:[1,21],38:[1,22],40:94,44:[2,38],45:[2,38],46:70,49:[1,23]},{5:[2,40],8:[2,40],17:[2,40],19:[1,95],21:[2,40],23:[2,40],37:[2,40],38:[2,40],44:[2,40],45:[2,40],49:[2,40]},{5:[2,41],8:[2,41],17:[2,41],21:[2,41],23:[2,41],37:[2,41],38:[2,41],44:[2,41],45:[2,41],49:[2,41]},{5:[2,42],8:[2,42],17:[2,42],21:[2,42],23:[2,42],37:[2,42],38:[2,42],44:[2,42],45:[2,42],49:[2,42]},{5:[2,15],8:[2,15],17:[2,15]},{5:[2,61],8:[2,61],17:[2,61],21:[2,61],23:[2,61],51:[2,61],53:[2,61],54:[2,61],56:[2,61]},{5:[2,62],8:[2,62],17:[2,62],21:[2,62],23:[2,62],51:[2,62],53:[2,62],54:[2,62],56:[2,62]},{15:71,20:96,21:[1,98],23:[1,97],34:73,35:72,37:[1,21],38:[1,22],40:88,46:70,49:[1,23]},{15:71,20:99,21:[1,101],23:[1,100],34:73,35:72,37:[1,21],38:[1,22],40:88,46:70,49:[1,23]},{21:[1,102]},{21:[2,45],23:[1,103],51:[1,36],53:[1,37]},{9:52,11:80,19:[1,29],21:[2,46],23:[1,81],24:26,47:104,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,69],8:[2,69],17:[2,69],21:[2,69],23:[2,69],51:[2,69],53:[2,69],54:[2,69],56:[2,69]},{30:[2,31],32:[2,31]},{21:[2,50],23:[1,59],42:105,48:58,49:[1,60]},{21:[2,48]},{17:[1,106]},{21:[1,107],23:[1,108]},{21:[2,29],23:[2,29]},{17:[1,109]},{17:[2,53],23:[1,110]},{17:[1,111]},{15:71,31:112,34:73,35:72,37:[1,21],38:[1,22],40:69,43:68,46:70,49:[1,23]},{24:113,60:[1,30]},{5:[2,37],8:[2,37],17:[2,37],21:[2,37],23:[2,37],44:[2,37],45:[2,37]},{9:52,11:80,19:[1,29],21:[2,46],23:[1,81],24:26,47:114,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{21:[1,115],23:[1,116]},{9:52,11:117,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,23],8:[2,23],17:[2,23],21:[2,23],23:[2,23],37:[2,23],38:[2,23],44:[2,23],45:[2,23],49:[2,23]},{21:[1,118],23:[1,119]},{9:52,11:120,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{5:[2,27],8:[2,27],17:[2,27],21:[2,27],23:[2,27],37:[2,27],38:[2,27],44:[2,27],45:[2,27],49:[2,27]},{5:[2,64],8:[2,64],17:[2,64],21:[2,64],23:[2,64],51:[2,64],53:[2,64],54:[2,64],56:[2,64]},{9:52,11:80,19:[1,29],21:[2,46],23:[1,81],24:26,47:121,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{21:[2,44]},{21:[2,47]},{5:[2,9],8:[2,9],17:[2,9]},{22:[1,122]},{24:123,60:[1,30]},{5:[2,12],8:[2,12],17:[2,12]},{12:90,15:18,17:[2,54],26:124,49:[1,23]},{5:[2,13],8:[2,13],17:[2,13]},{5:[2,33],8:[2,33],17:[2,33]},{5:[2,35],8:[2,35],17:[2,35],44:[2,35]},{21:[1,125]},{5:[2,20],8:[2,20],17:[2,20],21:[2,20],23:[2,20],37:[2,20],38:[2,20],44:[2,20],45:[2,20],49:[2,20]},{9:52,11:126,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{21:[1,127],51:[1,36],53:[1,37]},{5:[2,24],8:[2,24],17:[2,24],21:[2,24],23:[2,24],37:[2,24],38:[2,24],44:[2,24],45:[2,24],49:[2,24]},{9:52,11:128,19:[1,29],24:26,50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{21:[1,129],51:[1,36],53:[1,37]},{21:[2,43]},{15:130,49:[1,23]},{21:[1,131]},{17:[2,52]},{5:[2,39],8:[2,39],17:[2,39],21:[2,39],23:[2,39],37:[2,39],38:[2,39],44:[2,39],45:[2,39],49:[2,39]},{21:[1,132],51:[1,36],53:[1,37]},{5:[2,22],8:[2,22],17:[2,22],21:[2,22],23:[2,22],37:[2,22],38:[2,22],44:[2,22],45:[2,22],49:[2,22]},{21:[1,133],51:[1,36],53:[1,37]},{5:[2,26],8:[2,26],17:[2,26],21:[2,26],23:[2,26],37:[2,26],38:[2,26],44:[2,26],45:[2,26],49:[2,26]},{16:[1,134]},{22:[1,135]},{5:[2,21],8:[2,21],17:[2,21],21:[2,21],23:[2,21],37:[2,21],38:[2,21],44:[2,21],45:[2,21],49:[2,21]},{5:[2,25],8:[2,25],17:[2,25],21:[2,25],23:[2,25],37:[2,25],38:[2,25],44:[2,25],45:[2,25],49:[2,25]},{6:136,7:4,9:5,11:7,12:6,14:[1,8],15:18,17:[2,5],18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{15:137,49:[1,23]},{17:[1,138]},{16:[1,139]},{5:[2,10],8:[2,10],17:[2,10]},{6:140,7:4,9:5,11:7,12:6,14:[1,8],15:18,17:[2,5],18:[1,9],19:[1,29],24:26,25:[1,10],27:[1,11],29:12,33:13,34:14,35:15,36:[1,16],37:[1,21],38:[1,22],39:[1,20],49:[1,23],50:[1,17],52:19,55:24,57:[1,25],58:[1,27],59:[1,28],60:[1,30]},{17:[1,141]},{5:[2,11],8:[2,11],17:[2,11]}],
defaultActions: {3:[2,2],31:[2,1],85:[2,48],104:[2,44],105:[2,47],121:[2,43],124:[2,52]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comment */
break;
case 1:/* skip whitespace */
break;
case 2:return 60
break;
case 3: /* 'text' */
									yy_.yytext = this.matches[1];
									return 28;
								
break;
case 4: /* "text" */
									yy_.yytext = this.matches[1];
									return 28;
								
break;
case 5:return 14
break;
case 6:return 18
break;
case 7:return 25
break;
case 8:return 27
break;
case 9:return 22
break;
case 10:return 36
break;
case 11:return 38
break;
case 12:return 37
break;
case 13:return 39
break;
case 14:return 30
break;
case 15:return 32
break;
case 16:return 58
break;
case 17:return 59
break;
case 18:return 57
break;
case 19:return 50
break;
case 20:return 49
break;
case 21:return 54
break;
case 22:return 56
break;
case 23:return 53
break;
case 24:return 51
break;
case 25:return 19
break;
case 26:return 21
break;
case 27:return 16
break;
case 28:return 17
break;
case 29:return 23
break;
case 30:return 8
break;
case 31:return 45
break;
case 32:return 44
break;
case 33:return '.'
break;
case 34:return 10
break;
case 35:return 5
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:'(.*?)')/,/^(?:"(.*?)")/,/^(?:lscript\b)/,/^(?:lsystem\b)/,/^(?:alphabet\b)/,/^(?:included\b)/,/^(?:using\b)/,/^(?:derive\b)/,/^(?:call\b)/,/^(?:sublsystem\b)/,/^(?:main\b)/,/^(?:-->)/,/^(?:-h>)/,/^(?:E\b)/,/^(?:PI\b)/,/^(?:__([A-Za-z_][A-Za-z_0-9_]*))/,/^(?:\$([A-Za-z_][A-Za-z_0-9_]*))/,/^(?:([A-Za-z_][A-Za-z_0-9_]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\|)/,/^(?:\.)/,/^(?:=)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
}(window.l2js);