/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
window.l2js && function(l2js) {
l2js.lparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_entries":4,"EOF":5,"stmts":6,"stmt":7,";":8,"var":9,"=":10,"e":11,"symbol":12,"text":13,"LSYSTEM":14,"id":15,"USING":16,"{":17,"}":18,"ALPHABET":19,"symbols":20,"ancestor":21,"RULE_OP":22,"successors":23,"main_call":24,"call":25,"CALL":26,"(":27,"axiom":28,",":29,"iterations":30,")":31,"MAIN":32,"string":33,"int":34,"arguments":35,"successor":36,"|":37,":":38,"number":39,"module":40,"elist":41,"argument":42,"ID":43,"VAR":44,"+":45,"term":46,"-":47,"*":48,"factor":49,"/":50,"E":51,"PI":52,"TEXT":53,"REAL":54,"INT":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",10:"=",14:"LSYSTEM",16:"USING",17:"{",18:"}",19:"ALPHABET",22:"RULE_OP",26:"CALL",27:"(",29:",",31:")",32:"MAIN",37:"|",38:":",43:"ID",44:"VAR",45:"+",47:"-",48:"*",50:"/",51:"E",52:"PI",53:"TEXT",54:"REAL",55:"INT"},
productions_: [0,[3,2],[4,1],[6,3],[6,1],[6,0],[7,3],[7,3],[7,1],[7,7],[7,5],[7,3],[7,1],[25,7],[24,2],[28,1],[30,1],[21,4],[21,1],[23,3],[23,1],[36,3],[36,1],[33,2],[33,1],[40,4],[40,1],[40,1],[41,3],[41,1],[41,0],[35,3],[35,1],[35,0],[42,1],[20,3],[20,1],[20,0],[12,1],[9,1],[15,1],[11,3],[11,3],[11,1],[46,3],[46,3],[46,1],[49,1],[49,1],[49,1],[49,1],[13,1],[39,1],[39,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
        	var block = new yy.Block(); 
        	block.entries = $$[$0-1]; 
        	return block; 
        
break;
case 2:this.$ = $$[$0]
break;
case 3:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 4:this.$ = [$$[$0]];
break;
case 5:this.$ = [];
break;
case 6:this.$ = $$[$0-2]; this.$.e = $$[$0];
break;
case 7:this.$ = $$[$0-2];this.$.e = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:
			var block = new yy.Block(); 
			block.entries = $$[$0-1];
			this.$ = new yy.LSystem($$[$0-5], $$[$0-3], block);
		
break;
case 10:
			$$[$0-3].type='alphabet';
			this.$ = new yy.Alphabet($$[$0-3], $$[$0-1]);
		
break;
case 11:this.$ = new yy.Rule($$[$0-2], $$[$0]);
break;
case 12:this.$ = $$[$0];
break;
case 13:$$[$0-5].type="lsystem"; this.$ = new yy.Call($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 14:this.$ = $$[$0]; this.$.main = true;
break;
case 15:this.$ = $$[$0]
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = new yy.Ancestor($$[$0-3], $$[$0-1]);
break;
case 18:this.$ = new yy.Ancestor($$[$0]);
break;
case 19:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 20:this.$ = [$$[$0]];
break;
case 21:this.$ = new yy.Successor($$[$0-2], $$[$0]);
break;
case 22:this.$ = new yy.Successor($$[$0]);
break;
case 23:this.$ = $$[$0]; this.$.unshift($$[$0-1]);
break;
case 24:this.$ = [$$[$0]];
break;
case 25:$$[$0-3].type="symbol"; this.$ = new yy.Module($$[$0-3], $$[$0-1]);
break;
case 26:$$[$0].type="symbol"; this.$ =  new yy.Module($$[$0]);
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 29:this.$ = [$$[$0]];
break;
case 30:this.$ = [];
break;
case 31:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 32:this.$ = [$$[$0]];
break;
case 33:this.$ = [];
break;
case 34: this.$ = new yy.ID($$[$0], 'arg');
break;
case 35:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 36:this.$ = [$$[$0]];
break;
case 37:this.$ = [];
break;
case 38: this.$ = $$[$0]; this.$.type='symbol';
break;
case 39: this.$ = new yy.ID($$[$0], 'var'); 
break;
case 40: this.$ = new yy.ID($$[$0]); 
break;
case 41:this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 42:this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 45:this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = Math.E;
break;
case 49:this.$ = Math.PI;
break;
case 50:this.$ = new yy.ID($$[$0], 'var');
break;
case 51:this.$ = String(yytext);
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = Number(yytext);
break;
case 54:this.$ = Number(yytext);
break;
}
},
table: [{3:1,4:2,5:[2,5],6:3,7:4,9:5,12:6,14:[1,7],15:12,19:[1,8],21:9,24:10,32:[1,13],43:[1,14],44:[1,11]},{1:[3]},{5:[1,15]},{5:[2,2]},{5:[2,4],8:[1,16],18:[2,4]},{5:[2,8],8:[2,8],10:[1,17],18:[2,8]},{10:[1,18],22:[2,18],27:[1,19]},{15:20,43:[1,14]},{15:21,43:[1,14]},{22:[1,22]},{5:[2,12],8:[2,12],18:[2,12]},{5:[2,39],8:[2,39],10:[2,39],18:[2,39]},{10:[2,38],18:[2,38],22:[2,38],27:[2,38],29:[2,38]},{25:23,26:[1,24]},{5:[2,40],8:[2,40],10:[2,40],16:[2,40],17:[2,40],18:[2,40],22:[2,40],26:[2,40],27:[2,40],29:[2,40],37:[2,40],38:[2,40],43:[2,40]},{1:[2,1]},{5:[2,5],6:25,7:4,9:5,12:6,14:[1,7],15:12,18:[2,5],19:[1,8],21:9,24:10,32:[1,13],43:[1,14],44:[1,11]},{11:26,34:33,39:29,44:[1,32],46:27,49:28,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{13:36,53:[1,37]},{31:[2,33],35:38,42:39,43:[1,40]},{16:[1,41]},{17:[1,42]},{15:47,23:43,25:48,26:[1,24],33:45,36:44,40:46,43:[1,14]},{5:[2,14],8:[2,14],18:[2,14]},{15:49,43:[1,14]},{5:[2,3],18:[2,3]},{5:[2,6],8:[2,6],18:[2,6],45:[1,50],47:[1,51]},{5:[2,43],8:[2,43],18:[2,43],29:[2,43],31:[2,43],45:[2,43],47:[2,43],48:[1,52],50:[1,53]},{5:[2,46],8:[2,46],18:[2,46],29:[2,46],31:[2,46],45:[2,46],47:[2,46],48:[2,46],50:[2,46]},{5:[2,47],8:[2,47],18:[2,47],29:[2,47],31:[2,47],45:[2,47],47:[2,47],48:[2,47],50:[2,47]},{5:[2,48],8:[2,48],18:[2,48],29:[2,48],31:[2,48],45:[2,48],47:[2,48],48:[2,48],50:[2,48]},{5:[2,49],8:[2,49],18:[2,49],29:[2,49],31:[2,49],45:[2,49],47:[2,49],48:[2,49],50:[2,49]},{5:[2,50],8:[2,50],18:[2,50],29:[2,50],31:[2,50],45:[2,50],47:[2,50],48:[2,50],50:[2,50]},{5:[2,52],8:[2,52],18:[2,52],29:[2,52],31:[2,52],37:[2,52],45:[2,52],47:[2,52],48:[2,52],50:[2,52]},{5:[2,53],8:[2,53],18:[2,53],29:[2,53],31:[2,53],37:[2,53],45:[2,53],47:[2,53],48:[2,53],50:[2,53]},{5:[2,54],8:[2,54],18:[2,54],29:[2,54],31:[2,54],37:[2,54],45:[2,54],47:[2,54],48:[2,54],50:[2,54]},{5:[2,7],8:[2,7],18:[2,7]},{5:[2,51],8:[2,51],18:[2,51]},{31:[1,54]},{29:[1,55],31:[2,32]},{29:[2,34],31:[2,34]},{15:56,43:[1,14]},{12:58,15:12,18:[2,37],20:57,43:[1,14]},{5:[2,11],8:[2,11],18:[2,11]},{5:[2,20],8:[2,20],18:[2,20],37:[1,59]},{5:[2,22],8:[2,22],18:[2,22],37:[2,22],38:[1,60]},{5:[2,24],8:[2,24],15:47,18:[2,24],25:48,26:[1,24],29:[2,24],33:61,37:[2,24],38:[2,24],40:46,43:[1,14]},{5:[2,26],8:[2,26],18:[2,26],26:[2,26],27:[1,62],29:[2,26],37:[2,26],38:[2,26],43:[2,26]},{5:[2,27],8:[2,27],18:[2,27],26:[2,27],29:[2,27],37:[2,27],38:[2,27],43:[2,27]},{27:[1,63]},{34:33,39:29,44:[1,32],46:64,49:28,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{34:33,39:29,44:[1,32],46:65,49:28,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{34:33,39:29,44:[1,32],49:66,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{34:33,39:29,44:[1,32],49:67,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{22:[2,17]},{31:[2,33],35:68,42:39,43:[1,40]},{17:[1,69]},{18:[1,70]},{18:[2,36],29:[1,71]},{15:47,23:72,25:48,26:[1,24],33:45,36:44,40:46,43:[1,14]},{34:33,39:73,54:[1,34],55:[1,35]},{5:[2,23],8:[2,23],18:[2,23],29:[2,23],37:[2,23],38:[2,23]},{11:75,31:[2,30],34:33,39:29,41:74,44:[1,32],46:27,49:28,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{15:47,25:48,26:[1,24],28:76,33:77,40:46,43:[1,14]},{5:[2,41],8:[2,41],18:[2,41],29:[2,41],31:[2,41],45:[2,41],47:[2,41],48:[1,52],50:[1,53]},{5:[2,42],8:[2,42],18:[2,42],29:[2,42],31:[2,42],45:[2,42],47:[2,42],48:[1,52],50:[1,53]},{5:[2,44],8:[2,44],18:[2,44],29:[2,44],31:[2,44],45:[2,44],47:[2,44],48:[2,44],50:[2,44]},{5:[2,45],8:[2,45],18:[2,45],29:[2,45],31:[2,45],45:[2,45],47:[2,45],48:[2,45],50:[2,45]},{31:[2,31]},{6:78,7:4,9:5,12:6,14:[1,7],15:12,18:[2,5],19:[1,8],21:9,24:10,32:[1,13],43:[1,14],44:[1,11]},{5:[2,10],8:[2,10],18:[2,10]},{12:58,15:12,18:[2,37],20:79,43:[1,14]},{5:[2,19],8:[2,19],18:[2,19]},{5:[2,21],8:[2,21],18:[2,21],37:[2,21]},{31:[1,80]},{29:[1,81],31:[2,29],45:[1,50],47:[1,51]},{29:[1,82]},{29:[2,15]},{18:[1,83]},{18:[2,35]},{5:[2,25],8:[2,25],18:[2,25],26:[2,25],29:[2,25],37:[2,25],38:[2,25],43:[2,25]},{11:75,31:[2,30],34:33,39:29,41:84,44:[1,32],46:27,49:28,51:[1,30],52:[1,31],54:[1,34],55:[1,35]},{30:85,34:86,55:[1,35]},{5:[2,9],8:[2,9],18:[2,9]},{31:[2,28]},{31:[1,87]},{31:[2,16]},{5:[2,13],8:[2,13],18:[2,13],26:[2,13],29:[2,13],37:[2,13],38:[2,13],43:[2,13]}],
defaultActions: {3:[2,2],15:[2,1],54:[2,17],68:[2,31],77:[2,15],79:[2,35],84:[2,28],86:[2,16]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comment */
break;
case 1:/* skip whitespace */
break;
case 2:return 55
break;
case 3:return 54
break;
case 4: /* 'text' */
									yy_.yytext = this.matches[1];
									return 53;
								
break;
case 5: /* "text" */
									yy_.yytext = this.matches[1];
									return 53;
								
break;
case 6:return 14
break;
case 7:return 19
break;
case 8:return 16
break;
case 9:return 26
break;
case 10:return 32
break;
case 11:return 22
break;
case 12:return 51
break;
case 13:return 52
break;
case 14:return 44
break;
case 15:return 43
break;
case 16:return 48
break;
case 17:return 50
break;
case 18:return 47
break;
case 19:return 45
break;
case 20:return 27
break;
case 21:return 31
break;
case 22:return 17
break;
case 23:return 18
break;
case 24:return 29
break;
case 25:return 8
break;
case 26:return 38
break;
case 27:return 37
break;
case 28:return 10
break;
case 29:return 5
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\s+)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:'(.*?)')/,/^(?:"(.*?)")/,/^(?:lsystem\b)/,/^(?:alphabet\b)/,/^(?:using\b)/,/^(?:call\b)/,/^(?:main\b)/,/^(?:-->)/,/^(?:E\b)/,/^(?:PI\b)/,/^(?:\$([A-Za-z_][A-Za-z_0-9_]*))/,/^(?:([A-Za-z_][A-Za-z_0-9_]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\|)/,/^(?:=)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
}(window.l2js);